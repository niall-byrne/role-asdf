---
- name: Set asdf_source Variable
  ansible.builtin.set_fact:
    "asdf_source": "{{ asdf_user_home }}/.asdf/asdf.sh"

- name: Install Homebrew Packages
  become: True
  become_user: "{{ asdf_user }}"
  community.general.homebrew:
    name: "{{ asdf_darwin_optional_dependencies }}"
    state: upgraded
  retries: "{{ asdf_homebrew_retries }}"
  delay: 3
  register: install_optional_dependencies
  until: install_optional_dependencies is not failed

- name: Install asdf Plugins
  become: True
  become_user: "{{ asdf_user }}"
  ansible.builtin.shell: "source {{ asdf_source }}; asdf plugin-add {{ item.name }} {{ item.repository | default() }}"
  args:
    chdir: "{{ asdf_user_home }}"
    creates: "{{ asdf_user_home }}/.asdf/plugins/{{ item.name }}"
    executable: "/bin/sh"
  with_items: "{{ asdf_plugins }}"
  when: asdf_plugins|length > 0
  ignore_errors: True

- name: Install OSX Specific Plugin Configuration
  ansible.builtin.include_tasks: "plugins_darwin/install.yml"
  with_items: "{{ asdf_plugins }}"
  when: plugin.name in asdf_darwin_plugin_dependencies
  loop_control:
    loop_var: plugin

- name: Install asdf Apps
  become: True
  become_user: "{{ asdf_user }}"
  ansible.builtin.shell: "source {{ asdf_source }}; {{ item[0]['pre_install'] | default(':') }}; asdf install {{ item.0.name }} {{ item.1 }}"
  environment: "{{ item[0]['environment'] | default({}) }}"
  args:
    chdir: "{{ asdf_user_home }}"
    creates: "{{ asdf_user_home }}/.asdf/installs/{{ item.0.name }}/{{ item.1 }}"
    executable: "/bin/sh"
  with_subelements:
    - "{{ asdf_plugins }}"
    - versions
    - flags:
      skip_missing: True
  when: asdf_plugins|length > 0

- name: Uninstall asdf Apps
  become: True
  become_user: "{{ asdf_user }}"
  ansible.builtin.shell: "source {{ asdf_source }}; asdf uninstall {{ item.0.name }} {{ item.1 }}"
  args:
    chdir: "{{ asdf_user_home }}"
    removes: "{{ asdf_user_home }}/.asdf/installs/{{ item.0.name }}/{{ item.1 }}"
    executable: "/bin/sh"
  with_subelements:
    - "{{ asdf_plugins }}"
    - delete_versions
    - flags:
      skip_missing: True
  when: asdf_plugins|length > 0

- name: Set Global App Versions
  become: True
  become_user: "{{ asdf_user }}"
  ansible.builtin.shell: "source {{ asdf_source }}; asdf global {{ item.name }} {{ item.global | default(item.versions | difference(item.delete_versions|default([])) | sort | first) }}"
  args:
    chdir: "{{ asdf_user_home }}"
    executable: "/bin/sh"
  when: item.versions is defined
  changed_when: false
  with_items: "{{ asdf_plugins }}"

- name: Set asdfrc
  become: True
  become_user: "{{ asdf_user }}"
  ansible.builtin.template:
    src: "asdfrc.j2"
    dest: "{{ asdf_user_home }}/.asdfrc"
    owner: "{{ asdf_user }}"
    mode: 0644
